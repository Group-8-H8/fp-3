definitions:
  dto.NewCreateCategoryRequest:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  dto.NewCreateCategoryResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      type:
        type: string
    type: object
  dto.NewCreateTaskRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      title:
        type: string
    required:
    - category_id
    - description
    - title
    type: object
  dto.NewCreateTaskResponse:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.NewDeleteAccountResponse:
    properties:
      message:
        type: string
    type: object
  dto.NewDeleteCategoryResponse:
    properties:
      message:
        type: string
    type: object
  dto.NewDeleteTaskResponse:
    properties:
      message:
        type: string
    type: object
  dto.NewGetCategoriesResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/dto.NewGetTaskOnCategoriesEndpoint'
        type: array
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.NewGetTaskOnCategoriesEndpoint:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.NewGetTaskResponse:
    properties:
      User:
        $ref: '#/definitions/dto.NewUserOnTaskResponse'
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.NewLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.NewLoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.NewRegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  dto.NewRegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
    type: object
  dto.NewUpdateAccountRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
    required:
    - email
    - full_name
    type: object
  dto.NewUpdateAccountResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  dto.NewUpdateCategoryRequest:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  dto.NewUpdateCategoryResponse:
    properties:
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.NewUpdateTaskRequest:
    properties:
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  dto.NewUpdateTaskResponse:
    properties:
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.NewUpdateTasksCategoryRequest:
    properties:
      category_id:
        type: integer
    required:
    - category_id
    type: object
  dto.NewUpdateTasksStatusRequest:
    properties:
      status:
        type: boolean
    type: object
  dto.NewUserOnTaskResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      description: Get all categories
      operationId: get-all-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.NewGetCategoriesResponse'
            type: array
      summary: Get All Categories
      tags:
      - category
    post:
      consumes:
      - application/json
      description: Create a new category
      operationId: create-new-category
      parameters:
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewCreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewCreateCategoryResponse'
      summary: Create Category
      tags:
      - category
  /categories/{categoryId}:
    delete:
      description: Delete Category
      operationId: delete-category
      parameters:
      - description: Id of the category
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewDeleteCategoryResponse'
      summary: Delete Category
      tags:
      - category
    get:
      description: Get category by categories ID
      operationId: get-category
      parameters:
      - description: Id of the category
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewGetCategoriesResponse'
      summary: Get Category
      tags:
      - category
    patch:
      consumes:
      - application/json
      description: Update category name
      operationId: update-category
      parameters:
      - description: Id of the category
        in: path
        name: categoryId
        required: true
        type: integer
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewUpdateCategoryResponse'
      summary: Update Category
      tags:
      - category
  /tasks:
    get:
      description: Get all tasks
      operationId: get-all-task
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.NewGetTaskResponse'
            type: array
      summary: Get All Tasks
      tags:
      - task
    post:
      consumes:
      - application/json
      description: Create a new task
      operationId: create-new-task
      parameters:
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewCreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewCreateTaskResponse'
      summary: Create Task
      tags:
      - task
  /tasks/{taskId}:
    delete:
      description: Delete task by task's ID
      operationId: delete-task
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewDeleteTaskResponse'
      summary: Delete Task
      tags:
      - task
    get:
      description: Get task by task's ID
      operationId: get-task-by-id
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewGetTaskResponse'
      summary: Get Task By ID
      tags:
      - task
    put:
      consumes:
      - application/json
      description: Update task's detail
      operationId: update-task
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: integer
      - description: request body json
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewUpdateTaskResponse'
      summary: Update Task
      tags:
      - task
  /tasks/update-category/{taskId}:
    patch:
      consumes:
      - application/json
      description: Update task's category
      operationId: update-tasks-category
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: integer
      - description: request body json
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUpdateTasksCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewUpdateTaskResponse'
      summary: Update Task's Category
      tags:
      - task
  /tasks/update-status/{taskId}:
    patch:
      consumes:
      - application/json
      description: Update task's status
      operationId: update-tasks-status
      parameters:
      - description: Id of the task
        in: path
        name: taskId
        required: true
        type: integer
      - description: request body json
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUpdateTasksStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewUpdateTaskResponse'
      summary: Update Task's Status
      tags:
      - task
  /users/delete-account:
    delete:
      description: Delete an account
      operationId: delete-account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewDeleteAccountResponse'
      summary: Delete Account
      tags:
      - user
  /users/login:
    post:
      consumes:
      - application/json
      description: Login registered account to get the token
      operationId: login-account
      parameters:
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewLoginResponse'
      summary: Login Registered Account
      tags:
      - user
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new account
      operationId: register-new-account
      parameters:
      - description: request body json
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.NewRegisterResponse'
      summary: Create Account
      tags:
      - user
  /users/update-account:
    put:
      consumes:
      - application/json
      description: Update account's fullname and email
      operationId: update-account
      parameters:
      - description: request body json
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/dto.NewUpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NewUpdateAccountResponse'
      summary: Update Account
      tags:
      - user
swagger: "2.0"
